{"meta":{"title":"Wenwen","subtitle":"我温富超就是饿死，从这里跳下去也不会去做前端，emm前端真好玩～","description":"一只蹦达的前端狗","author":"Wenwen","url":"https://n3taway.github.io"},"pages":[{"title":"About","date":"2018-04-28T06:46:36.354Z","updated":"2018-04-28T06:46:36.354Z","comments":false,"path":"about/index.html","permalink":"https://n3taway.github.io/about/index.html","excerpt":"","text":"关于我const me = &#123; name: '温富超', nickname: '温温', sex: 'male', college: '绵阳职业技术学院', mail: 'n3taway@gmail.com', weChat: 'nishiwoervip', introduction: '一个瓜皮前端', blog-frame: 'hexo' &#125;;"},{"title":"","date":"2018-04-27T18:38:16.289Z","updated":"2018-04-27T18:38:16.289Z","comments":false,"path":"categories/index.html","permalink":"https://n3taway.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2018-04-27T18:34:24.030Z","updated":"2018-04-27T18:34:24.030Z","comments":false,"path":"tags/index.html","permalink":"https://n3taway.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"hexo + github 搭建个人博客","slug":"hexo_config","date":"2018-04-27T16:19:33.957Z","updated":"2018-05-02T06:11:09.801Z","comments":true,"path":"2018/04/28/hexo_config/","link":"","permalink":"https://n3taway.github.io/2018/04/28/hexo_config/","excerpt":"","text":"&emsp;hexo&emsp;快速、简洁且高效的博客框架 hexo配置安装hexo框架到全局 hexo官网cnpm install -g hexo-cli 创建blog目录 cd到目录初始化结构cd 目录hexo init 安装hexo依赖cnpm install 启动本地服务器查看效果hexo s hexo部署主题和文章配置好后，配置 SSH 使用 hexo deploy命令部署到github 用ssh-keygen工具生成密钥ssh-keygen -t rsa -C &quot;xx@xx.com&quot; //其他邮箱也行 添加Deploy keys 将ssh-keygen生成的id_rsa.pub文件里的信息复制到github项目的Deploy keys中。Deploy keys位置：在你的blog项目中打开setting &gt; Deploy keys 添加key。当然也可以使用tortoisegit工具部署。 测试连接ssh -T git@github.com出现的信息中有以下消息 就表示ssh-keygen配置成功 You’ve successfully authenticated, but GitHub does not provide shell access. 生成静态html相关文件hexo g 配置deploy信息 打开_config.ymldeploy:&emsp;&emsp;type: git&emsp;&emsp;repository: git@github.com:xxx/xxx.github.io.git&emsp;&emsp;branch: master 部署到github上hexo deploy如果出现下面报错信息 ERROR Deployer not found: git 请安装 hexo-deployer-gitcnpm install hexo-deployer-git --save","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://n3taway.github.io/tags/hexo/"},{"name":"github","slug":"github","permalink":"https://n3taway.github.io/tags/github/"}]},{"title":"gulp前端自动化构建工具使用","slug":"gulp_config","date":"2018-04-27T16:19:33.953Z","updated":"2018-04-28T07:17:36.337Z","comments":true,"path":"2018/04/28/gulp_config/","link":"","permalink":"https://n3taway.github.io/2018/04/28/gulp_config/","excerpt":"","text":"确保gulp已安装到全局cnpm install --global gulp进入项目目录 初始化package.jsonnmp init -y首先将gulp安装到开发依赖cnpm i gulp --save-dev 安装 自动化插件 选择开发时需要的插件 search插件 在当前项目安装gulp和插件模块，并且保存到开发依赖cnpm i 插件名 --save-dev 编译less的插件cnpm i gulp-less --save-dev 压缩css的插件cnpm i gulp-clean-css --save-dev 重命名css的插件cnpm i gulp-clean-css --save-dev 自动补全 CSS3 前缀cnpm i gulp-autoprefixer --save-dev 热刷新web服务器插件cnpm i browser-sync --save-dev引入gulp和插件模块 在gulpfile.js里面，创建gulpfile.js文件并引入gulp和插件模块const gulp = require('gulp'); //gulp主模块const xxx = require('gulp-xxx'); //插件 创建任务 examplegulp.task('less',function () &#123; console.log('less'); gulp .src('./styles/less/index.less') //源文件 .pipe(less()) //编译 .pipe(gulp.dest('./styles/css')) //输出文件的路径&#125;) watch自动编译+热刷新// 开启服务器gulp.task('browserSync', function () &#123; browserSync.init(&#123; files:['**'],//监听整个项目 server:&#123; baseDir:'./', // 设置服务器的根目录 index:'./index.html' // 指定默认打开的文件 &#125;, port:8050 // 指定访问服务器的端口号 &#125;);&#125;);// 观察者gulp.task('watch', function () &#123; gulp.watch('./styles/less/*.less', ['less']); gulp.watch('./styles/css/*.css', ['cleanCss']);&#125;)gulp.task('default', ['watch', 'browserSync']); 自动构建down将package.json中的开发依赖复制到 开发项目的package.json中，根据需求修改。复制gulpfile.js到开发项目中，根据需求修改。","categories":[],"tags":[{"name":"gulp","slug":"gulp","permalink":"https://n3taway.github.io/tags/gulp/"}]}]}