{"meta":{"title":"Wenwen","subtitle":"我温富超就是饿死，从这里跳下去也不会去做前端，emm前端真好玩～","description":"一只蹦达的前端狗","author":"Wenwen","url":"https://n3taway.github.io"},"pages":[{"title":"","date":"2018-04-27T18:38:16.289Z","updated":"2018-04-27T18:38:16.289Z","comments":false,"path":"categories/index.html","permalink":"https://n3taway.github.io/categories/index.html","excerpt":"","text":""},{"title":"About","date":"2018-04-28T06:46:36.354Z","updated":"2018-04-28T06:46:36.354Z","comments":false,"path":"about/index.html","permalink":"https://n3taway.github.io/about/index.html","excerpt":"","text":"关于我const me = &#123; name: '温富超', nickname: '温温', sex: 'male', college: '绵阳职业技术学院', mail: 'n3taway@gmail.com', weChat: 'nishiwoervip', introduction: '一个瓜皮前端', blog-frame: 'hexo' &#125;;"},{"title":"","date":"2018-04-27T18:34:24.030Z","updated":"2018-04-27T18:34:24.030Z","comments":false,"path":"tags/index.html","permalink":"https://n3taway.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"React 修改组件中的this指向","slug":"React_components_this","date":"2017-06-11T12:21:55.000Z","updated":"2018-06-24T04:24:07.884Z","comments":true,"path":"2017/06/11/React_components_this/","link":"","permalink":"https://n3taway.github.io/2017/06/11/React_components_this/","excerpt":"","text":"才入门时喜欢犯的错误//构造器中定义组件状态constructor()&#123; super() this.state=&#123; value:22 &#125;&#125;// 原型方法handle()&#123; console.log(this.state.value);&#125;render()&#123; return( &lt;p&gt; 我组件&lt;button onClick=&#123;this.handle&#125;&gt;按钮&lt;/button&gt; 组件中的状态值:&#123;this.state.value&#125; &lt;/p&gt; ) &#125;/*点击按钮 Cannot read property 'state' of undefined */// jsx中的this并没有指向类，所以报错 主动修改this//手动修改this指向，但有弊端。每次点击按钮都会用bind创建新的函数，浪费内存。&lt;p&gt; 我组件&lt;button onClick=&#123;this.handle.bind(this)&#125;&gt;按钮&lt;/button&gt; 组件中的状态值:&#123;this.state.value&#125;&lt;/p&gt;我们可以在组件初始化事改变this的指向，这样只会返回一个函数constructor()&#123; super() this.state=&#123; value:22 &#125; //改变事件this指向 this.handle = this.handle.bind(this); &#125;这样在render函数中就可以像之前那样写了，不会报错。&lt;p&gt; 我组件&lt;button onClick=&#123;this.handle&#125;&gt;按钮&lt;/button&gt; 组件中的状态值:&#123;this.state.value&#125;&lt;/p&gt; 下面介绍一种更优雅的写法，嘿嘿~利用箭头函数的特性this会自动绑定上下文。 handle=() =&gt; &#123; console.log(this.state.value);&#125;&lt;p&gt; 我组件&lt;button onClick=&#123;this.handle&#125;&gt;按钮&lt;/button&gt; 组件中的状态值:&#123;this.state.value&#125;&lt;/p&gt;","categories":[],"tags":[{"name":"React","slug":"React","permalink":"https://n3taway.github.io/tags/React/"},{"name":"前端框架","slug":"前端框架","permalink":"https://n3taway.github.io/tags/前端框架/"}]},{"title":"React_Router_路由传参","slug":"React_Router_chuancan","date":"2017-03-19T13:34:14.000Z","updated":"2018-05-21T17:57:55.204Z","comments":true,"path":"2017/03/19/React_Router_chuancan/","link":"","permalink":"https://n3taway.github.io/2017/03/19/React_Router_chuancan/","excerpt":"","text":"React_Route 版本3.2.0 params方式1)入口文件路由 路由表&lt;Router history=&#123;hashHistory&#125;&gt; &lt;Route path='/Personal/:id' component=&#123;Personal&#125; /&gt;&lt;/Router&gt; 2)传参页面js跳转location.href = '#/Personal'; 或者html跳转&lt;Link to=&#123; '/Personal/' + '2' &#125;&gt;个人中心&lt;/Link&gt;this.props.router.push('/Personal/' + '2'); 3)接收页面 console.log(this.props.params.id); query方式1)入口文件路由 路由表&lt;Router history=&#123;hashHistory&#125;&gt; &lt;Route path='/Personal' component=&#123;Personal&#125; /&gt;&lt;/Router&gt; 2)传参页面var data = &#123;id:3,name:sam,age:36&#125;;var path = &#123; pathname:'/Personal', query:data,&#125;js跳转location.href = '#/Personal'; 或者html跳转&lt;Link to=&#123;path&#125;&gt;个人中心&lt;/Link&gt;hashHistory.push(path); 3)接收页面var data = this.props.location.query;var &#123;id,name,age&#125; = data; state方式 state方式和query方式相近,只是第二步的传参页面query改为state,第三步的接收页面query也改为state,state方式传参数据不会以明文的方式显示在地址栏。","categories":[],"tags":[{"name":"React","slug":"React","permalink":"https://n3taway.github.io/tags/React/"},{"name":"前端框架","slug":"前端框架","permalink":"https://n3taway.github.io/tags/前端框架/"}]},{"title":"gulp前端自动化构建工具使用","slug":"gulp_config","date":"2016-12-19T13:34:14.000Z","updated":"2018-05-21T17:53:37.533Z","comments":true,"path":"2016/12/19/gulp_config/","link":"","permalink":"https://n3taway.github.io/2016/12/19/gulp_config/","excerpt":"","text":"确保gulp已安装到全局cnpm install --global gulp进入项目目录 初始化package.jsonnmp init -y首先将gulp安装到开发依赖cnpm i gulp --save-dev 安装 自动化插件 选择开发时需要的插件 search插件 在当前项目安装gulp和插件模块，并且保存到开发依赖cnpm i 插件名 --save-dev 编译less的插件cnpm i gulp-less --save-dev 压缩css的插件cnpm i gulp-clean-css --save-dev 重命名css的插件cnpm i gulp-clean-css --save-dev 自动补全 CSS3 前缀cnpm i gulp-autoprefixer --save-dev 热刷新web服务器插件cnpm i browser-sync --save-dev引入gulp和插件模块 在gulpfile.js里面，创建gulpfile.js文件并引入gulp和插件模块const gulp = require('gulp'); //gulp主模块const xxx = require('gulp-xxx'); //插件 创建任务 examplegulp.task('less',function () &#123; console.log('less'); gulp .src('./styles/less/index.less') //源文件 .pipe(less()) //编译 .pipe(gulp.dest('./styles/css')) //输出文件的路径&#125;) watch自动编译+热刷新// 开启服务器gulp.task('browserSync', function () &#123; browserSync.init(&#123; files:['**'],//监听整个项目 server:&#123; baseDir:'./', // 设置服务器的根目录 index:'./index.html' // 指定默认打开的文件 &#125;, port:8050 // 指定访问服务器的端口号 &#125;);&#125;);// 观察者gulp.task('watch', function () &#123; gulp.watch('./styles/less/*.less', ['less']); gulp.watch('./styles/css/*.css', ['cleanCss']);&#125;)gulp.task('default', ['watch', 'browserSync']); 自动构建down将package.json中的开发依赖复制到 开发项目的package.json中，根据需求修改。复制gulpfile.js到开发项目中，根据需求修改。","categories":[],"tags":[{"name":"gulp","slug":"gulp","permalink":"https://n3taway.github.io/tags/gulp/"}]},{"title":"修改 this 指向","slug":"modify_this_point","date":"2016-10-21T12:34:18.000Z","updated":"2018-05-21T17:57:11.081Z","comments":true,"path":"2016/10/21/modify_this_point/","link":"","permalink":"https://n3taway.github.io/2016/10/21/modify_this_point/","excerpt":"","text":"封装函数 f，使 f 的 this 指向指定的对象function bindThis(f, oTarget) &#123; return f.bind(oTarget); //返回了传入的函数 加括号传参调用&#125; bindThis(function(a, b)&#123; return this.test + a + b&#125;,&#123;test: 1&#125;)(2, 3)&#125;","categories":[],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://n3taway.github.io/tags/javascript/"}]},{"title":"hexo 主题配置","slug":"hexo_theme-config","date":"2016-10-20T12:32:16.000Z","updated":"2018-05-21T17:56:21.800Z","comments":true,"path":"2016/10/20/hexo_theme-config/","link":"","permalink":"https://n3taway.github.io/2016/10/20/hexo_theme-config/","excerpt":"","text":"查看主题作者的文档主题默认使用 less 作为 css 预处理工具。 命令hexo s 服务器打开没有样式请用less编译cnpm install hexo-renderer-less --save 用于生成 rss。cnpm install hexo-generator-feed --save 用于生成静态站点数据，用作站内搜索的数据源。cnpm install hexo-generator-json-content --save 用于生成微信分享二维码。可选，不安装时会请求 jiathis Api 生成二维码。cnpm install hexo-helper-qrcode --save 开启标签页修改hexo/source/tags/index.md的元数据hexo new page tags 开启分类页，仅 card theme 支持。修改hexo/source/categories/index.md的元数据hexo new page categories indigo支持hypercomments评论 到 https://www.hypercomments.com/ 注册账号，仅支持 Google 账号注册。 按提示一步步往下走。 完成之后，在设置页面，找到 Widget -&gt;code 中的 widget_id 值。 到主题配置文件中填写#hyper_id: widget_id","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://n3taway.github.io/tags/hexo/"}]},{"title":"hexo + github 搭建个人博客","slug":"hexo_config","date":"2016-10-19T14:10:54.000Z","updated":"2018-05-21T17:55:40.827Z","comments":true,"path":"2016/10/19/hexo_config/","link":"","permalink":"https://n3taway.github.io/2016/10/19/hexo_config/","excerpt":"","text":"&emsp;hexo&emsp;快速、简洁且高效的博客框架 hexo配置安装hexo框架到全局 hexo官网cnpm install -g hexo-cli 创建blog目录 cd到目录初始化结构cd 目录hexo init 安装hexo依赖cnpm install 启动本地服务器查看效果hexo s hexo部署主题和文章配置好后，配置 SSH 使用 hexo deploy命令部署到github 用ssh-keygen工具生成密钥ssh-keygen -t rsa -C &quot;xx@xx.com&quot; //其他邮箱也行 添加Deploy keys 将ssh-keygen生成的id_rsa.pub文件里的信息复制到github项目的Deploy keys中。Deploy keys位置：在你的blog项目中打开setting &gt; Deploy keys 添加key。当然也可以使用tortoisegit工具部署。 测试连接ssh -T git@github.com出现的信息中有以下消息 就表示ssh-keygen配置成功 You’ve successfully authenticated, but GitHub does not provide shell access. 生成静态html相关文件hexo g 配置deploy信息 打开_config.ymldeploy:&emsp;&emsp;type: git&emsp;&emsp;repository: git@github.com:xxx/xxx.github.io.git&emsp;&emsp;branch: master 部署到github上hexo deploy如果出现下面报错信息 ERROR Deployer not found: git 请安装 hexo-deployer-gitcnpm install hexo-deployer-git --save","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://n3taway.github.io/tags/hexo/"},{"name":"github","slug":"github","permalink":"https://n3taway.github.io/tags/github/"}]}]}